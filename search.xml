<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>edge浏览器简单设置</title>
    <url>/2020/05/02/edge/</url>
    <content><![CDATA[<h1 id="edge出了问题？edge的简单设置帮你解决"><a href="#edge出了问题？edge的简单设置帮你解决" class="headerlink" title="edge出了问题？edge的简单设置帮你解决"></a>edge出了问题？edge的简单设置帮你解决</h1><p><a href="https://imgchr.com/i/JzA10I" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/03/JzA10I.md.png" alt="JzA10I.md.png"></a></p>
<p>Edge是微软出品的浏览器，这里不多做介绍。</p>
<p>主要讲讲在edge设置菜单的各种功能，使用过程中出现的问题，怎么通过设置解决。</p>
<h2 id="问题一：刚打开浏览器是别的网页而不是新标签页"><a href="#问题一：刚打开浏览器是别的网页而不是新标签页" class="headerlink" title="问题一：刚打开浏览器是别的网页而不是新标签页"></a>问题一：刚打开浏览器是别的网页而不是新标签页</h2><blockquote>
<p>别的网页（比如什么上网导航什么的）</p>
</blockquote>
<blockquote>
<p>新标签页（上图就是新标签页）</p>
</blockquote>
<p>这时候就有两种可能：</p>
<p>1、被网页劫持了，这时可能电脑中了病毒，杀毒可以解决（把浏览器设置改了之后不行的话才是）</p>
<p>2、浏览器设置被改了（可能是被别的软件改的，因为一般人不会去点那个）</p>
<p><a href="https://imgchr.com/i/JzEVDs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/03/JzEVDs.png" alt="JzEVDs.png"></a></p>
<p>点右上角的策略号，找到设置打开</p>
<p>然后找到启动时，选择新标签页，再关掉浏览器重开。</p>
<p><a href="https://imgchr.com/i/JzEi8S" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/03/JzEi8S.md.png" alt="JzEi8S.md.png"></a></p>
<h2 id="问题二：搜索的时候没办法在搜索框输入，而只能在顶部输入"><a href="#问题二：搜索的时候没办法在搜索框输入，而只能在顶部输入" class="headerlink" title="问题二：搜索的时候没办法在搜索框输入，而只能在顶部输入"></a>问题二：搜索的时候没办法在搜索框输入，而只能在顶部输入</h2><p>下图：搜索框，这个问题困扰了我很久，只要在搜索框输入任何东西，都会自动弹到地址栏那里，而且这种情况是突然出现的，我也没改设置。<br><a href="https://imgchr.com/i/JzEjRU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/03/JzEjRU.md.png" alt="JzEjRU.md.png"></a></p>
<p>解决方法，同样是打开设置</p>
<p><a href="https://imgchr.com/i/JzEkvQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/03/JzEkvQ.png" alt="JzEkvQ.png"></a></p>
<p>点击隐私与服务，往下拉，找到服务最下面的地址栏</p>
<p><a href="https://imgchr.com/i/JzEEuj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/03/JzEEuj.md.png" alt="JzEEuj.md.png"></a></p>
<p><a href="https://imgchr.com/i/JzEFgg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/03/JzEFgg.md.png" alt="JzEFgg.md.png"></a><br><a href="https://imgchr.com/i/JzVKeA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/03/JzVKeA.md.png" alt="JzVKeA.md.png"></a><br>如果这里显示的是地址栏，那么就改成搜索框，问题就解决了</p>
<h2 id="问题三：新标签页如何隐藏下面的广告-新闻（如何美化新标签页）"><a href="#问题三：新标签页如何隐藏下面的广告-新闻（如何美化新标签页）" class="headerlink" title="问题三：新标签页如何隐藏下面的广告/新闻（如何美化新标签页）"></a>问题三：新标签页如何隐藏下面的广告/新闻（如何美化新标签页）</h2><p><a href="https://imgchr.com/i/JzZVkq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/03/JzZVkq.md.png" alt="JzZVkq.md.png"></a></p>
<p>新标签页右上角有个设置，点击如何选择自定义，看自己喜好选择内容显示还是不显示，内容就是指那些新闻和广告什么的。<br><a href="https://imgchr.com/i/JzZKcF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/03/JzZKcF.md.png" alt="JzZKcF.md.png"></a><br><a href="https://imgchr.com/i/JzZ0nH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/03/JzZ0nH.png" alt="JzZ0nH.png"></a></p>
<p>这里就是edge的简单设置，这是其中一部分，以后会写更多的。</p>
]]></content>
      <tags>
        <tag>软件应用</tag>
      </tags>
  </entry>
  <entry>
    <title>泰拉瑞亚原版全流程攻略</title>
    <url>/2020/04/05/first-text/</url>
    <content><![CDATA[<p>废话：《泰拉瑞亚》是由Re-Logic公司开发的一款高自由度的沙盒游戏，于2011年5月16日在PC上发行。<br>攻略开始：<br>正在开发…<br>正在开发..<br>正在开发…<br>正在开发….<br>正在开发…</p>
]]></content>
      <categories>
        <category>泰拉瑞亚</category>
      </categories>
      <tags>
        <tag>泰拉瑞亚</tag>
      </tags>
  </entry>
  <entry>
    <title>win10 U盘装机法</title>
    <url>/2020/04/13/win10/</url>
    <content><![CDATA[<h1 id="装机教程-Windows-10-U盘装机"><a href="#装机教程-Windows-10-U盘装机" class="headerlink" title="#装机教程# Windows 10 U盘装机"></a>#装机教程# Windows 10 U盘装机</h1><p>windows 10目前越来越普及，目前（2020年）win 10用户已经超过了win7，如下图（这张图是一年前的，很旧了，现在肯定不止这个数据）<br><img src="https://s1.ax1x.com/2020/04/13/Gjd6G6.png" alt="Gjd6G6.png"><br>而且微软官方已经停止了对win 7的支持。</p>
<h4 id="所以，windows-10-大势所趋，还不赶紧装个win10玩玩？"><a href="#所以，windows-10-大势所趋，还不赶紧装个win10玩玩？" class="headerlink" title="所以，windows 10 大势所趋，还不赶紧装个win10玩玩？"></a>所以，windows 10 大势所趋，还不赶紧装个win10玩玩？</h4><h4 id="问题来了：怎么装个win10？"><a href="#问题来了：怎么装个win10？" class="headerlink" title="问题来了：怎么装个win10？"></a>问题来了：怎么装个win10？</h4><p>不急，下面告诉你</p>
<h2 id="1-什么是U盘装机？适用于什么情况？"><a href="#1-什么是U盘装机？适用于什么情况？" class="headerlink" title="1.什么是U盘装机？适用于什么情况？"></a>1.什么是U盘装机？适用于什么情况？</h2><p>U盘装机就是用一个 <strong>在U盘里的小系统</strong> （即win PE系统）把你要装的系统安装在主机上 的方法，他是个万能的方法，没有什么限制，如果你的电脑是一台<strong>新的电脑</strong>（里面没有系统），那么就可以用这个方法，只要有个<strong>U盘</strong>就行。如果是win7升级win10也可以用这个方法。<br>注意的是，你的C盘（系统盘）需要格式化，这里提醒一下，格式化后面再说。</p>
<blockquote>
<p>想知道你适用于哪种装机方法的可以看这里-&gt;（链接）</p>
</blockquote>
<h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2.准备工作"></a>2.准备工作</h2><p>这里要准备一个硬件和一个工具和一个系统镜像。</p>
<blockquote>
<p>① 一个<strong>空U盘</strong>，大小4G以上（win PE大概占2G）<br>如果没有空U盘也可以把U盘内文件备份一次（就复制出来）</p>
</blockquote>
<p><strong>装PE会格式化U盘！！！</strong></p>
<blockquote>
<p>② 下载winPE可以百度搜win pe 或者 点这里<a href="http://www.wepe.com.cn/" target="_blank" rel="noopener">http://www.wepe.com.cn/</a>在官网下</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2020/04/13/Gv58SO.png" alt="Gv58SO.png"></p>
<blockquote>
<p>③ 下载win10镜像（镜像就是一个用来安装系统文件）在MSDN下载<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a>如图，操作系统&gt;win10&gt;选择版本&gt;详细信息&gt;复制链接 在迅雷下载即可</p>
</blockquote>
<pre><code>注意！x64：64位系统 x86：32位系统
business：商业版（也就是专业版）
consumer：消费者版（也就是普通版）</code></pre><p><img src="https://s1.ax1x.com/2020/04/13/GvojSK.png" alt="GvojSK.png"></p>
<h2 id="3-第一步：安装winPE进U盘里"><a href="#3-第一步：安装winPE进U盘里" class="headerlink" title="3.第一步：安装winPE进U盘里"></a>3.第一步：安装winPE进U盘里</h2><h4 id="什么是winPE？"><a href="#什么是winPE？" class="headerlink" title="什么是winPE？"></a>什么是winPE？</h4><p>win PE就是专门用来装系统的系统，也就是预装系统的系统，它是一种系统预装环境和工具。</p>
<p><img src="https://s1.ax1x.com/2020/04/13/GvWdRe.png" alt="GvWdRe.png"></p>
<p>打开安装到U盘（右下）<br><img src="https://s1.ax1x.com/2020/04/13/GvfJyj.png" alt="GvfJyj.png"></p>
<p>注意待写入U盘是不是那个空U盘<br><img src="https://s1.ax1x.com/2020/04/13/GvhMu9.png" alt="GvhMu9.png"></p>
<p>然后就点安装，等它完成。（安装的时候你会发现你不能打开U盘）</p>
<p>然后你会发现你的U盘容量变小了，这部分就是PE系统占了。这样你的U盘就能恢复平常正常使用了，不过我推荐还是有一个专门的装机盘会好一点（几十块一个U盘够用好多年呢）。</p>
<h2 id="4-第二步：把你下载的系统镜像放入U盘"><a href="#4-第二步：把你下载的系统镜像放入U盘" class="headerlink" title="4.第二步：把你下载的系统镜像放入U盘"></a>4.第二步：把你下载的系统镜像放入U盘</h2><p>方便在pe系统内找到你下的镜像，这个写着10的长的要死的就是镜像文件，图标上有个光盘的样子。<br><img src="https://s1.ax1x.com/2020/04/13/GvbLHe.png" alt="GvbLHe.png"></p>
<h2 id="5-第三步：重启电脑，设置U盘启动"><a href="#5-第三步：重启电脑，设置U盘启动" class="headerlink" title="5.第三步：重启电脑，设置U盘启动"></a>5.第三步：重启电脑，设置U盘启动</h2><p>重启电脑，在显示主板牌子的时候按F8（不同品牌的按键不一定一样，有的F12或者F11，一般<strong>屏幕底部会显示</strong>）进入BIOS，这里建议百度如何进入BIOS。<br><img src="https://s1.ax1x.com/2020/04/14/GzSBJU.jpg" alt="GzSBJU.jpg"><br>我的BIOS是三代，如果是2代或1代（跟我不一样的建议百度”BIOS”），不用在意不同品牌的按键布局，反正功能肯定是有的，进入界面会有一个启动顺序，找到你U盘的型号移到前面就行。也可以点<strong>高级模式</strong>，在启动选项设置，1、2、3的顺序就是启动顺序。<br><img src="https://s1.ax1x.com/2020/04/14/GzpEkV.jpg" alt="GzpEkV.jpg"><br><img src="https://s1.ax1x.com/2020/04/14/GzSJMj.jpg" alt="GzSJMj.jpg"><br>设置成功的话，点击退出，并保存设置。然后电脑会再一次启动，启动成功会出现进度条，进度条过完后会有win10图标。打开之后就是下图的样子。<br><img src="https://s1.ax1x.com/2020/04/14/GxzP3Q.png" alt="GxzP3Q.png"><br>然后，打开你的U盘，找到你的镜像文件，右键点击装载（这里会生成一个虚拟光驱），然后下一步<br><img src="https://s1.ax1x.com/2020/04/14/GzCEzF.jpg" alt="GzCEzF.jpg"></p>
<h2 id="6-第四步：格式化硬盘"><a href="#6-第四步：格式化硬盘" class="headerlink" title="6.第四步：格式化硬盘"></a>6.第四步：格式化硬盘</h2><p>格式化掉你要装系统的那个硬盘，<strong>右键</strong>硬盘就能格式化，或者用PE里自带的<strong>分区助手</strong>备份一次再格式化也可以，注意看看硬盘是不是NTFS格式，如果不是要转到NTFS格式。</p>
<h2 id="7-第五步：打开windows安装器-开始安装系统"><a href="#7-第五步：打开windows安装器-开始安装系统" class="headerlink" title="7.第五步：打开windows安装器,开始安装系统"></a>7.第五步：打开windows安装器,开始安装系统</h2><p>打开桌面的windows安装器<br><img src="https://s1.ax1x.com/2020/04/14/Gxzp4S.png" alt="Gxzp4S.png"><br>如图，第一个选择你刚刚装载的虚拟光驱，然后按这个路径sources&gt;install.wim，<strong>下面两个都选你要装系统的硬盘（你刚刚格式化那个）</strong>，然后选择版本（各版本区别可以自己查，这里推荐专业版）。<br><img src="https://s1.ax1x.com/2020/04/14/Gz3spD.png" alt="Gz3spD.png"><br>然后就可以点开始安装了。</p>
<p>安装完成就拔掉U盘，重启电脑就可以了。然后就会显示win10的安装界面，接着就是选语言等等的界面，之后的这里就不多说了，按它的默认选项就好了。</p>
<p>然后你的win10就装好了。欢呼吧！！！</p>
]]></content>
      <tags>
        <tag>系统相关</tag>
      </tags>
  </entry>
  <entry>
    <title>win10怎么激活？win10一键激活</title>
    <url>/2020/04/30/win10%E6%BF%80%E6%B4%BB/</url>
    <content><![CDATA[<h1 id="win10怎么激活？win10一键激活"><a href="#win10怎么激活？win10一键激活" class="headerlink" title="win10怎么激活？win10一键激活"></a>win10怎么激活？win10一键激活</h1><p>我们辛辛苦苦把windows装好了以后，那么就可以正常使用windows了。</p>
<p>还不知道怎么装win10？点这里 <a href="https://kai-wei-kfuse.github.io/2020/04/13/win10/#more">https://kai-wei-kfuse.github.io/2020/04/13/win10/#more</a></p>
<h2 id="下一步就是激活windows"><a href="#下一步就是激活windows" class="headerlink" title="下一步就是激活windows"></a>下一步就是激活windows</h2><h3 id="首先说说不激活windows和激活有什么区别"><a href="#首先说说不激活windows和激活有什么区别" class="headerlink" title="首先说说不激活windows和激活有什么区别"></a>首先说说不激活windows和激活有什么区别</h3><p>答案：没什么区别，只是右下角会有一个激活windows水印，不影响正常使用。<br><a href="https://imgchr.com/i/JqY6Ej" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/30/JqY6Ej.png" alt="JqY6Ej.png"></a></p>
<p>激活并不难，只要一个激活工具，一键就可以激活。这里推荐小马激活工具</p>
<p><a href="https://imgchr.com/i/JqNkTJ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/30/JqNkTJ.png" alt="JqNkTJ.png"></a></p>
<p>度盘：<a href="https://pan.baidu.com/s/1hYF7mYaR42gt5Fe-omMgHQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1hYF7mYaR42gt5Fe-omMgHQ</a></p>
<p>提取码：buhb</p>
]]></content>
      <tags>
        <tag>系统相关</tag>
      </tags>
  </entry>
  <entry>
    <title>泰拉瑞亚模组冲突如何解决</title>
    <url>/2020/04/11/%E6%B3%B0%E6%8B%89%E7%91%9E%E4%BA%9A/</url>
    <content><![CDATA[<h1 id="如何快速找出模组冲突"><a href="#如何快速找出模组冲突" class="headerlink" title="如何快速找出模组冲突"></a>如何快速找出模组冲突</h1><p>首先你可以大概推测（这一步可做可不做），想想模组从哪里下，版本对不对，下载的可能是有问题的。</p>
<h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><ol>
<li>创建一个空的测试角色（每次排查都要用它）</li>
<li>把模组分类：主要模组、次要模组、功能性模组等等方便排查</li>
<li>确定mod冲突的类型，我大致分三类，<br>无法加载模组（其实这个直接能看到不用排查）、<br>无法创建世界（卡住或崩溃）、<br>能进游戏能正常玩耍，但是出现小bug<br>（比如我出现过的：一个召唤物只能杀一个敌人，然后召唤物就消失了、模组掉落物无法掉落）</li>
</ol>
<p><a href="https://imgchr.com/i/GXN7h8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/13/GXN7h8.png" alt="GXN7h8.png"></a></p>
<p>如图，创建世界的时候卡在这里。</p>
<h2 id="1-全部模组禁用"><a href="#1-全部模组禁用" class="headerlink" title="1.全部模组禁用"></a>1.全部模组禁用</h2><p><font color=red size=4>全部禁用，一个不剩</font><br><img src="https://s1.ax1x.com/2020/04/13/GXtfoV.png" alt="GXtfoV.png"></p>
<h2 id="2-先启用大型模组（如果有的话），"><a href="#2-先启用大型模组（如果有的话），" class="headerlink" title="2.先启用大型模组（如果有的话），"></a>2.先启用大型模组（如果有的话），</h2><p>比如灾厄，瑟银等等，一次启用1-4个（如果你有那么多的话）。然后用测试角色，然后就按照你发现的bug或冲突进行测试</p>
<p><img src="https://s1.ax1x.com/2020/04/13/GXU8ud.png" alt="GXU8ud.png"></p>
<p>举个栗子：<br>无法创建世界（卡在一个位置创建不了）<br>这时就要用测试角色创建世界（时间可能稍久，但没有办法）</p>
<h2 id="3-然后就有两个分支"><a href="#3-然后就有两个分支" class="headerlink" title="3.然后就有两个分支"></a>3.然后就有两个分支</h2><h3 id="①发现问题"><a href="#①发现问题" class="headerlink" title="①发现问题"></a>①发现问题</h3><p>这时就要看启用的几个模组（范围大大缩小），一个一个禁用，顺序可以随便定，注意禁用之后还有问题的话禁用的就先别启用，直到找出问题mod。（如果bug消失，那应该是你这次测试禁用的mod有冲突，这就是问题mod）<br>找出后启用刚刚第一次测试的几个大型mod，出现问题的mod不用开，再测试有没有出现bug。</p>
<h3 id="②没有问题"><a href="#②没有问题" class="headerlink" title="②没有问题"></a>②没有问题</h3><p>这时要保持大型mod启用，在启用次要mod，跟前面一样以此类推，找到最终问题。</p>
<h4 id="总的来说，据我所知找模组冲突没有特别简便的方法，只有靠自己一一排除，也没有什么软件可以一键查出，所以下模组的时候也要谨慎，每个模组都是独立开发的，互相有冲突实属正常，最后希望大家能找到好玩又没有冲突的整合包！！！"><a href="#总的来说，据我所知找模组冲突没有特别简便的方法，只有靠自己一一排除，也没有什么软件可以一键查出，所以下模组的时候也要谨慎，每个模组都是独立开发的，互相有冲突实属正常，最后希望大家能找到好玩又没有冲突的整合包！！！" class="headerlink" title="总的来说，据我所知找模组冲突没有特别简便的方法，只有靠自己一一排除，也没有什么软件可以一键查出，所以下模组的时候也要谨慎，每个模组都是独立开发的，互相有冲突实属正常，最后希望大家能找到好玩又没有冲突的整合包！！！"></a>总的来说，据我所知找模组冲突没有特别简便的方法，只有靠自己一一排除，也没有什么软件可以一键查出，所以下模组的时候也要谨慎，每个模组都是独立开发的，互相有冲突实属正常，最后希望大家能找到好玩又没有冲突的整合包！！！</h4>]]></content>
      <tags>
        <tag>泰拉瑞亚</tag>
      </tags>
  </entry>
  <entry>
    <title>实验5</title>
    <url>/2022/01/18/%E5%AE%9E%E9%AA%8C5/</url>
    <content><![CDATA[<p>实验5链表操作：<br><strong>题目：</strong><br>编写一个链表综合程序,实现以下功能:</p>
<ol>
<li>编写一个<strong>链表的构建</strong>函数输入任意多条的长度不等的字符串，结束的条件是<br>直接回车，用动态链表方式处理保存各个字符串,</li>
<li>编写一个<strong>显示函数</strong>, 调用即显示前面所有输入过的字符串，</li>
<li>编写一个<strong>查询函数</strong>用以查询前面输入的字符串里是否有某字符串。</li>
<li>编写一个<strong>文件保存函数</strong>, 调用后链表上的所有字符串保存在文件data.txt里.</li>
<li>编写一个读文件添加链表数据的函数, 调用后,能把文件data.txt里的字符添加<br>到当前的链表上</li>
<li>构建<strong>功能选择菜单</strong>, 通过菜单选择运行以上哪个函数的功能.</li>
</ol>
<p>（广东工业大学计算机）</p>
<h2 id="第一部分：创建链表与打印"><a href="#第一部分：创建链表与打印" class="headerlink" title="第一部分：创建链表与打印"></a><strong>第一部分：创建链表与打印</strong></h2><p>首先我立马打了几个框架，第一次测试：失败</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">strings</span>&#123;</span></span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line">        strings* next;</span><br><span class="line">    &#125;;</span><br><span class="line">strings* head=<span class="literal">NULL</span>;<span class="comment">//设置头指针，指向NULL;</span></span><br><span class="line"></span><br><span class="line"><span class="function">strings *<span class="title">create</span><span class="params">(<span class="keyword">int</span> n)</span><span class="comment">//创建链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    strings *head=<span class="literal">NULL</span>,*node=<span class="literal">NULL</span>,*<span class="built_in">end</span>=<span class="literal">NULL</span>;</span><br><span class="line">    head=(strings*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(strings));</span><br><span class="line">    <span class="built_in">end</span>=head;<span class="comment">//初始链表只有一个头指针，所以尾等于头</span></span><br><span class="line">    <span class="keyword">while</span>(gets(node-&gt;s)&amp;&amp;<span class="built_in">strcmp</span>(node-&gt;s,<span class="string">""</span>)!=<span class="number">0</span>)</span><br><span class="line">    <span class="comment">//for(int i=0;i&lt;n;i++)</span></span><br><span class="line">    &#123;</span><br><span class="line">        node=(strings*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(strings));<span class="comment">//每一次开辟一个空间</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,node-&gt;s);</span><br><span class="line">        <span class="comment">//node-&gt;s=a;</span></span><br><span class="line">        <span class="built_in">end</span>-&gt;next=node;</span><br><span class="line">        <span class="built_in">end</span>=node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">end</span>-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(strings* p)</span><span class="comment">//打印</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//strings *p=head;</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %s"</span>,i,p-&gt;s);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,n);</span><br><span class="line">    head=create(n);</span><br><span class="line">    <span class="built_in">print</span>(head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果1：</p>
<ul>
<li>无输出</li>
</ul>
<p>思考：<br>1、经过测试打印和创建都有问题<br>修改：<br>1、更换表达方式</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(gets(node-&gt;s)&amp;&amp;<span class="built_in">strcmp</span>(node-&gt;s,<span class="string">""</span>)!=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(gets(node-&gt;s)&amp;&amp;<span class="built_in">strlen</span>(node-&gt;s)!=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>2、更改打印的代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(strings* p)</span><span class="comment">//打印</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %s"</span>,i,p-&gt;s);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>删掉了一行<code>p = p-&gt;next;</code>这样才能输出第一个节点<br>3、参考运行成功代码<br>发现原来看的别人的博客写的代码是错的，根本运行不了（流汗）。<br>第二次测试</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">strings</span>&#123;</span></span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line">        strings* next;</span><br><span class="line">    &#125;;</span><br><span class="line">strings* head=<span class="literal">NULL</span>;<span class="comment">//设置头指针，指向NULL;</span></span><br><span class="line"></span><br><span class="line"><span class="function">strings * <span class="title">create</span><span class="params">()</span><span class="comment">//创建链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    strings *head=<span class="literal">NULL</span>,*node=<span class="literal">NULL</span>,*end=<span class="literal">NULL</span>;</span><br><span class="line">    node=(strings*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(strings));</span><br><span class="line">    end=node;<span class="comment">//初始链表只有一个头指针，所以尾等于头</span></span><br><span class="line">    <span class="keyword">while</span>(gets(node-&gt;s)&amp;&amp;<span class="built_in">strlen</span>(node-&gt;s)!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)head=node;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        end-&gt;next=node;</span><br><span class="line">        end=node;</span><br><span class="line">        node=(strings*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(strings));</span><br><span class="line">    &#125;</span><br><span class="line">    end-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> (head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct strings *<span class="title">creat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">strings</span> *<span class="title">head</span>,*<span class="title">p1</span>,*<span class="title">p2</span>;</span>      </span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;    </span><br><span class="line">	head=<span class="literal">NULL</span>;</span><br><span class="line">    p1=( struct strings *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">    p2=p1;</span><br><span class="line">	gets(p1-&gt;s);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">strlen</span>(p1-&gt;s)!=<span class="number">0</span>)</span><br><span class="line">    &#123;  </span><br><span class="line">        n=n+<span class="number">1</span>;	  </span><br><span class="line">        <span class="keyword">if</span>  (n==<span class="number">1</span>) </span><br><span class="line">            head=p1;  </span><br><span class="line">        <span class="keyword">else</span>   </span><br><span class="line">            p2-&gt;next=p1;</span><br><span class="line">        p2=p1;	  </span><br><span class="line">        p1=(struct strings *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">	    gets(p1-&gt;s);</span><br><span class="line">    &#125;</span><br><span class="line">    p2-&gt;next=<span class="literal">NULL</span>;      </span><br><span class="line">    <span class="keyword">return</span>(head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(strings* p)</span><span class="comment">//打印</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %s "</span>,i,p-&gt;s);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head=create();</span><br><span class="line">    print(head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行成功。<br>打印和创建函数完成。</p>
<h2 id="第二部分：文件读写和添加节点"><a href="#第二部分：文件读写和添加节点" class="headerlink" title="第二部分：文件读写和添加节点"></a><strong>第二部分：文件读写和添加节点</strong></h2><p>添加节点放在这里是因为在添加节点的同时顺便写入文件。<br><strong>1、读取文件</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">FILE *fp=fopen(data,<span class="string">"r"</span>);<span class="comment">//data是文件名</span></span><br><span class="line"><span class="keyword">if</span>(fp==<span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error\n"</span>);<span class="comment">//如果读取失败输出失败</span></span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>和创建链表相同，每次打开文件都要重新读取重新创建链表；不同的是，输入不一样，变成了从文件读取，使用<code>fscanf()</code>函数，完整函数如下</p>
<blockquote>
<p>解释：<code>fscanf()</code>：从文件中读取字符串，但是在遇到第一个空格和换行符时，它会停止读取</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">struct strings *<span class="title">readfile</span><span class="params">(<span class="keyword">char</span> *data)</span><span class="comment">//读取文件并且创建链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp=fopen(data,<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="comment">//和上面一样</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span> *<span class="title">head</span>,*<span class="title">node</span>,*<span class="title">end</span>;</span></span><br><span class="line">    node=(struct strings*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">    end=node;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">"%s"</span>,node-&gt;s)!=EOF)<span class="comment">//和前面不同的是这里，从文件读取</span></span><br><span class="line">    &#123;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">            head=node;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            end-&gt;next=node;</span><br><span class="line">        end=node;</span><br><span class="line">        node=(struct strings*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">    &#125;</span><br><span class="line">    end-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2、保存到文件</strong><br>这里要了解几个函数（菜鸟教程）<br>①<code>fputc()</code>函数<br>函数 fputc() 把参数 c 的字符值写入到 fp 所指向的输出流中。如果写入成功，它会返回写入的字符，如果发生错误，则会返回 EOF。<br>②<code>fputs()</code>函数<br>函数 fputs() 把字符串 s 写入到 fp 所指向的输出流中。如果写入成功，它会返回一个非负值，如果发生错误，则会返回 EOF。<br>③<code>fprintf()</code>函数<br>int fprintf(FILE *fp,const char *format, …) 函数把一个字符串写入到文件中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(struct strings *p,<span class="keyword">char</span> *data)</span><span class="comment">//保存到文件</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp=fopen(data,<span class="string">"w"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">//----一模一样的如果读取失败输出失败-----</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(fp,<span class="string">"%s\n"</span>,p-&gt;s);</span><br><span class="line">      p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3、添加节点</strong><br>添加手动输入的字符</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">struct strings *<span class="title">addtofile</span><span class="params">(struct strings *head)</span><span class="comment">//添加节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span> *<span class="title">ne</span>;</span></span><br><span class="line">    <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">        ne=(struct strings *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));<span class="comment">//先开辟空间</span></span><br><span class="line">        gets(ne-&gt;s);<span class="comment">//输入手动输入的字符</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(ne-&gt;s)!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head=addtolist(head,ne);<span class="comment">//添加节点函数在下面</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">free</span>(ne);<span class="comment">//如果没了就释放掉</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">struct strings *<span class="title">addtolist</span><span class="params">(struct strings *head,struct strings* news)</span><span class="comment">//添加节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span>* <span class="title">p</span>=<span class="title">head</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (head==<span class="literal">NULL</span>)&#123;<span class="comment">//似乎一定要写这个if，不然就无输出</span></span><br><span class="line">        head=news;</span><br><span class="line">        news-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next=news;</span><br><span class="line">    news-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>4、程序主体</strong><br>这是实现文件读写的链表程序，read file读取文件并且输出，在add：后面输入字符，如果回车两次，即没有输入，则会打印整个链表<br><img src="https://img-blog.csdnimg.cn/0966887326e344be88effd00d7a40c14.png#pic_center" alt="程序结果"><br>程序如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">strings</span>&#123;</span></span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">strings</span>* <span class="title">next</span>;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">strings</span>* <span class="title">head</span>=<span class="title">NULL</span>;</span><span class="comment">//设置头指针，指向NULL;</span></span><br><span class="line"></span><br><span class="line"><span class="function">struct strings * <span class="title">create</span><span class="params">()</span><span class="comment">//创建链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span> *<span class="title">head</span>=<span class="title">NULL</span>,*<span class="title">node</span>=<span class="title">NULL</span>,*<span class="title">end</span>=<span class="title">NULL</span>;</span></span><br><span class="line">    node=(struct strings*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">    end=node;<span class="comment">//初始链表只有一个头指针，所以尾等于头</span></span><br><span class="line">    <span class="keyword">while</span>(gets(node-&gt;s)&amp;&amp;<span class="built_in">strlen</span>(node-&gt;s)!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)head=node;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        end-&gt;next=node;</span><br><span class="line">        end=node;</span><br><span class="line">        node=(struct strings*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">    &#125;</span><br><span class="line">    end-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> (head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct strings* p)</span><span class="comment">//打印</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,p-&gt;s);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(struct strings *p,<span class="keyword">char</span> *filename)</span><span class="comment">//保存到文件</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp=fopen(filename,<span class="string">"w"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(fp,<span class="string">"%s\n"</span>,p-&gt;s);</span><br><span class="line">      p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct strings *<span class="title">readfile</span><span class="params">(<span class="keyword">char</span> *data)</span><span class="comment">//读取文件并且创建链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp=fopen(data,<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span> *<span class="title">head</span>,*<span class="title">node</span>,*<span class="title">end</span>;</span></span><br><span class="line">    node=(struct strings*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">    end=node;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">"%s"</span>,node-&gt;s)!=EOF)<span class="comment">//和前面不同的是这里</span></span><br><span class="line">    &#123;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">            head=node;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            end-&gt;next=node;</span><br><span class="line">        end=node;</span><br><span class="line">        node=(struct strings*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">    &#125;</span><br><span class="line">    end-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct strings *<span class="title">addtolist</span><span class="params">(struct strings *head,struct strings* news)</span><span class="comment">//添加节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span>* <span class="title">p</span>=<span class="title">head</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        head=news;</span><br><span class="line">        news-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next=news;</span><br><span class="line">    news-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct strings *<span class="title">addtofile</span><span class="params">(struct strings *head)</span><span class="comment">//添加节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span> *<span class="title">ne</span>;</span></span><br><span class="line">    <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">        ne=(struct strings *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">        gets(ne-&gt;s);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(ne-&gt;s)!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head=addtolist(head,ne);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">free</span>(ne);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"read file:\n"</span>);</span><br><span class="line">    head=readfile(<span class="string">"data.txt"</span>);<span class="comment">//读取文件并创建链表</span></span><br><span class="line">    print(head);<span class="comment">//打印</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"add:\n"</span>);</span><br><span class="line">    addtofile(head);<span class="comment">//添加字符串到链表</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"display:\n"</span>);</span><br><span class="line">    print(head);</span><br><span class="line">    save(head,<span class="string">"data.txt"</span>);<span class="comment">//保存</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//head=create();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第三部分：菜单实现"><a href="#第三部分：菜单实现" class="headerlink" title="第三部分：菜单实现"></a><strong>第三部分：菜单实现</strong></h2><p>一、两个键盘读取函数：<br>1、检测输入按键函数<code>getch()</code><br>函数返回按键的数值；</p>
<blockquote>
<p>UP = 72<br>    DOWN = 80<br>    LEFT = 75<br>    RIGHT = 77<br>    ENTER = 13<br>    ESC = 27<br>    //按键数值</p>
</blockquote>
<p>2、函数<code>kbhit()</code><br> 检查当前是否有键盘输入，若有则返回一个非0值，否则返回0 。<br>函数名：kbhit()（VC++6.0下为_kbhit()）<br>用法：int kbhit(void);<br>包含头文件： include &lt;conio.h&gt;<br>两者区别：<br>kbhit() 在执行时,检测是否有按键按下,有按下返回非0值，一般是1；没有按下返回0；<br>是非阻塞函数。<br>getch() 在执行时，检测按下什么键，如果不按键该函数不返回，是阻塞函数</p>
<p>二、设置文本样式<br>我们需要制作一个菜单，使用方向键选择选项，并且高亮显示，这里就需要设置字体格式，使用<code>SetConsoleTextAttribute()</code>函数可以设置文字颜色和高亮。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),<span class="number">0x70</span>);<span class="comment">//高亮显示</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),<span class="number">0x07</span>);<span class="comment">//正常显示</span></span><br></pre></td></tr></table></figure>
<p>这里是简短的测试程序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;//测试读取键盘和设置高亮</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(kbhit())&#123;</span><br><span class="line">            <span class="keyword">char</span> c=getch();</span><br><span class="line">            <span class="keyword">if</span>(GetAsyncKeyState(VK_UP))</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"up,"</span>);</span><br><span class="line">            <span class="keyword">if</span>(GetAsyncKeyState(VK_DOWN))</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Down,"</span>);</span><br><span class="line">                <span class="comment">//读取到上或者下就对应输出</span></span><br><span class="line">            <span class="keyword">if</span>(GetAsyncKeyState(VK_LEFT))&#123;</span><br><span class="line">                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),<span class="number">0x70</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\nHighlight,"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">if</span>(GetAsyncKeyState(VK_RIGHT))&#123;</span><br><span class="line">                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),<span class="number">0x07</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\nNormal,"</span>);</span><br><span class="line">                <span class="comment">//读取到左或者右就高亮或恢复（如果高亮则恢复，正常则不变）</span></span><br><span class="line">        &#125;</span><br><span class="line">        Sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序结果<br><img src="https://img-blog.csdnimg.cn/09b7ed2362e94c58a2e554e44ed6edee.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAa2FpX3dlaV8=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>三、显示菜单并且高亮<br>读取键盘完成了，就需要显示出菜单界面，我们设置一个char数组来储存。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> MenuText[<span class="number">7</span>][<span class="number">30</span>]=&#123;</span><br><span class="line">    <span class="string">"[A]  Create a List  "</span>,</span><br><span class="line">    <span class="string">"[B]  Display the List  "</span>,</span><br><span class="line">    <span class="string">"[C]  Find the Word  "</span>,</span><br><span class="line">    <span class="string">"[D]  Save to File  "</span>,</span><br><span class="line">    <span class="string">"[E]  Read to List "</span>,</span><br><span class="line">    <span class="string">"[F]  Add to List  "</span>,</span><br><span class="line">    <span class="string">"[Q]  Exit   "</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>将他打印出来的话，就是正常的样子。但是我们需要让他高亮，这里就需要思考，如何让特定的选项高亮呢？这里我们在打印菜单函数<code>coutmenu（）</code>函数里面设置了一个变量<code>highlight</code>，他的值是多少代表是第几行需要高亮。接着我们使用for循环7次（有7行）一次输出，这样菜单里面就有一个选项是高亮的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">coutmenu</span><span class="params">(<span class="keyword">int</span> highlight)</span><span class="comment">//打印菜单函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n======================\n"</span>);<span class="comment">//只是输出边界线</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">     <span class="keyword">if</span> (i==highlight<span class="number">-1</span>)</span><br><span class="line">     SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), <span class="number">0x70</span>);</span><br><span class="line">     <span class="comment">//设置高亮</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), <span class="number">0x07</span>);</span><br><span class="line">     <span class="comment">//设置正常</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,MenuText[i]);<span class="comment">//设置完成后输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), <span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"======================\n"</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如图所示（假设这里highlight=2，那么第二行就会高亮）<br><img src="https://img-blog.csdnimg.cn/21cf39a25564485fb8928e28fc65d548.png#pic_center" alt="在这里插入图片描述"><br>不知道大家有没有想到，怎么让他按照我们的意愿高亮。想不到也没关系，我也想不到，这里我们通过反复清空屏幕，再反复输出的方式，来实现上下移动。</p>
<p>四、实现选项移动<br>因为我们要反复输出我们就需要清空屏幕，这里我们用<code>system(&quot;cls&quot;);</code>来清空屏幕。<br>同时我们需要使用<code>sleep()</code>函数来让程序暂停，如果数值设置太短，我们按方向键的时候，可能已经经过了好多个循环，相当于你按了n多次方向键，会跳的很快。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="keyword">if</span> (kbhit())&#123;</span><br><span class="line">            c=getch();</span><br><span class="line">            <span class="keyword">if</span> (GetAsyncKeyState(VK_UP))&#123;</span><br><span class="line">                high=(high&gt;<span class="number">1</span>)?high<span class="number">-1</span>:<span class="number">7</span>;<span class="comment">//程序的巧妙之处，超过7则回退到1</span></span><br><span class="line">                Sleep(<span class="number">140</span>);</span><br><span class="line">                system(<span class="string">"cls"</span>);</span><br><span class="line">                coutmenu(high);<span class="comment">//打印菜单函数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (GetAsyncKeyState(VK_DOWN))&#123;</span><br><span class="line">                high=(high&lt;<span class="number">7</span>)?high+<span class="number">1</span>:<span class="number">1</span>;</span><br><span class="line">                Sleep(<span class="number">140</span>);</span><br><span class="line">                system(<span class="string">"cls"</span>);</span><br><span class="line">                coutmenu(high);</span><br><span class="line">            &#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>（这里是另一个函数，所以高亮显示的行号用<code>high</code>表示）<br>这个程序的巧妙之处在于每次收到上下的信号就会对变量high做出运算，DOWN的情况是大于7则变成1，小于7则加1。这样在第七行（最后一行），再按一次down就会回到第一行。不过这个回退不是必要的，也可以不加。<br>五、按回车执行对应程序<br>在前面的if语句后面接上 if 语句，判断是否回车，回车符是<code>&#39;\r&#39;</code>，接着用swich语句来判断情况执行语句。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'\r'</span>)&#123;//判断回车</span><br><span class="line">             system(<span class="string">"cls"</span>);//清空屏幕</span><br><span class="line">             coutmenu(high);//再打印</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">"command is [%c]"</span>,<span class="string">'A'</span>+high-1);//同时输出在执行的选项（测试用，后面可以删）</span><br><span class="line">                switch (high)</span><br><span class="line">                &#123;</span><br><span class="line">                <span class="keyword">case</span> 1:<span class="built_in">printf</span>(<span class="string">"1"</span>);//后面需要加上代码</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> 2:<span class="built_in">printf</span>(<span class="string">"2"</span>);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> 3:<span class="built_in">printf</span>(<span class="string">"3"</span>);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> 4:<span class="built_in">printf</span>(<span class="string">"4"</span>);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> 5:<span class="built_in">printf</span>(<span class="string">"5"</span>);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> 6:<span class="built_in">printf</span>(<span class="string">"6"</span>);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> 7:<span class="built_in">printf</span>(<span class="string">"7"</span>);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>效果如图，按回车后才回显示<br><img src="https://img-blog.csdnimg.cn/8def2cd2cbff482ab864bb76406554c2.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="第四部分：加上查找功能"><a href="#第四部分：加上查找功能" class="headerlink" title="第四部分：加上查找功能"></a>第四部分：加上查找功能</h2><p>没有太大难度，基础的查找操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(struct strings *head)</span><span class="comment">//查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* <span class="keyword">word</span>;</span><br><span class="line">    gets(<span class="keyword">word</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span> *<span class="title">p</span>=<span class="title">head</span>;</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//p=p-&gt;next;</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(p-&gt;s,<span class="keyword">word</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Search successfully\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Search unsuccessfully!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第五部分：把菜单整合到链表程序中"><a href="#第五部分：把菜单整合到链表程序中" class="headerlink" title="第五部分：把菜单整合到链表程序中"></a><strong>第五部分：把菜单整合到链表程序中</strong></h2><p>所有工作都分工做完了，现在就剩下整合合微调了。<br>一、判断语句设置<br>这是整合后的Switch函数，这里的函数一定要调用对，别搞错了，所以函数命名的时候一定要清楚。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (high)</span><br><span class="line">            &#123;</span><br><span class="line">                system(<span class="string">"cls"</span>);</span><br><span class="line">                coutmenu(high);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"add:\n"</span>);<span class="comment">//创建链表，并且手动输入</span></span><br><span class="line">                head=create();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">print</span>(head);<span class="comment">//打印</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Input your word which you want to find:"</span>);<span class="comment">//查找</span></span><br><span class="line">                <span class="built_in">find</span>(head);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                save(head,<span class="string">"data.txt"</span>);<span class="comment">//保存到文件（会清空原本）</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="comment">//head=readfile("data.txt");</span></span><br><span class="line">                head=addinlist(head,<span class="string">"data.txt"</span>);<span class="comment">//(读取文件的内容添加到链表后面）</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"add:"</span>);<span class="comment">//手动输入添加字符串到链表后面</span></span><br><span class="line">                addtofile(head);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//退出</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="comment">//对应处理的程序段</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"command %c finished"</span>,<span class="string">'A'</span>+high<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>二、修改一个函数<br>这里前面一个函数需要修改才能使用，因为实现的功能是读取文件内容，把内容添加到链表后面，不是手动输入，所以前面的addtofile函数需要修改。</p>
<p>修改前：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct strings *<span class="title">addtofile</span><span class="params">(struct strings *head)</span><span class="comment">//添加节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span> *<span class="title">ne</span>;</span></span><br><span class="line">    <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">        ne=(struct strings *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">        gets(ne-&gt;s);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(ne-&gt;s)!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head=addtolist(head,ne);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">free</span>(ne);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先把文件读写的代码加上去<code>FILE *fp=fopen(data,&quot;r&quot;);</code>同样加上是否读取文件成功的判断，<code>gets</code>改成<code>fscanf(fp,&quot;%s&quot;,ne-&gt;s)</code>。<br>修改后：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct strings *<span class="title">addinlist</span><span class="params">(struct strings *head,<span class="keyword">char</span>* data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span> *<span class="title">ne</span>;</span></span><br><span class="line">    FILE *fp=fopen(data,<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">        ne=(struct strings *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fscanf</span>(fp,<span class="string">"%s"</span>,ne-&gt;s)!=EOF)</span><br><span class="line">        &#123;</span><br><span class="line">            head=addtolist(head,ne);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">free</span>(ne);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后就完成了。</p>
<h2 id="附加：按字母键跳转选项"><a href="#附加：按字母键跳转选项" class="headerlink" title="附加：按字母键跳转选项"></a>附加：按字母键跳转选项</h2><p>菜单前面有ABCDEF,其实还可以通过按字母跳转，原理相同，关键在于求出高亮的是第几行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (c&lt;=<span class="string">'z'</span>&amp;&amp; c&gt;=<span class="string">'a'</span>)c=c-(<span class="string">'a'</span>-<span class="string">'A'</span>);</span><br><span class="line">           <span class="keyword">if</span> (c&lt;=<span class="string">'F'</span> &amp;&amp; c&gt;=<span class="string">'A'</span>)&#123;</span><br><span class="line">               <span class="comment">//对应处理的程序段</span></span><br><span class="line">               high=c-<span class="string">'A'</span>+<span class="number">1</span>;</span><br><span class="line">               system(<span class="string">"cls"</span>);</span><br><span class="line">               coutmenu(high);</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">"command [%c] "</span>,c);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>（运行平台vscode）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">strings</span>&#123;</span></span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">strings</span>* <span class="title">next</span>;</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">char</span> MenuText[<span class="number">7</span>][<span class="number">40</span>]=&#123;</span><br><span class="line">    <span class="string">"|[A]  Create a List       |"</span>,</span><br><span class="line">    <span class="string">"|[B]  Display the List    |"</span>,</span><br><span class="line">    <span class="string">"|[C]  Find the Word       |"</span>,</span><br><span class="line">    <span class="string">"|[D]  Save to File        |"</span>,</span><br><span class="line">    <span class="string">"|[E]  Read to List        |"</span>,</span><br><span class="line">    <span class="string">"|[F]  Add to List         |"</span>,</span><br><span class="line">    <span class="string">"|[Q]  Exit                |"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">coutmenu</span><span class="params">(<span class="keyword">int</span> highlight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n---------------------------\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i==highlight<span class="number">-1</span>)</span><br><span class="line">            SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), <span class="number">0x70</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), <span class="number">0x07</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,MenuText[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), <span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"---------------------------\n"</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">strings</span>* <span class="title">head</span>=<span class="title">NULL</span>;</span><span class="comment">//设置头指针，指向NULL;</span></span><br><span class="line"></span><br><span class="line"><span class="function">struct strings * <span class="title">create</span><span class="params">()</span><span class="comment">//创建链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span> *<span class="title">head</span>=<span class="title">NULL</span>,*<span class="title">node</span>=<span class="title">NULL</span>,*<span class="title">end</span>=<span class="title">NULL</span>;</span></span><br><span class="line">    node=(struct strings*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">    <span class="built_in">end</span>=node;<span class="comment">//初始链表只有一个头指针，所以尾等于头</span></span><br><span class="line">    <span class="keyword">while</span>(gets(node-&gt;s)&amp;&amp;<span class="built_in">strlen</span>(node-&gt;s)!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)head=node;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">end</span>-&gt;next=node;</span><br><span class="line">        <span class="built_in">end</span>=node;</span><br><span class="line">        node=(struct strings*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">end</span>-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> (head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct strings* p)</span><span class="comment">//打印</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,p-&gt;s);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(struct strings *head)</span><span class="comment">//查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* <span class="keyword">word</span>;</span><br><span class="line">    gets(<span class="keyword">word</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span> *<span class="title">p</span>=<span class="title">head</span>;</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//p=p-&gt;next;</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(p-&gt;s,<span class="keyword">word</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Search successfully\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Search unsuccessfully!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(struct strings *p,<span class="keyword">char</span> *filename)</span><span class="comment">//保存到文件</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp=fopen(filename,<span class="string">"w"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(fp,<span class="string">"%s\n"</span>,p-&gt;s);</span><br><span class="line">      p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct strings *<span class="title">readfile</span><span class="params">(<span class="keyword">char</span> *data)</span><span class="comment">//读取文件并且创建链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp=fopen(data,<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span> *<span class="title">head</span>,*<span class="title">node</span>,*<span class="title">end</span>;</span></span><br><span class="line">    node=(struct strings*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">    <span class="built_in">end</span>=node;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">"%s"</span>,node-&gt;s)!=EOF)<span class="comment">//和前面不同的是这里</span></span><br><span class="line">    &#123;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">            head=node;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="built_in">end</span>-&gt;next=node;</span><br><span class="line">        <span class="built_in">end</span>=node;</span><br><span class="line">        node=(struct strings*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">end</span>-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct strings *<span class="title">addtolist</span><span class="params">(struct strings *head,struct strings* news)</span><span class="comment">//添加节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span>* <span class="title">p</span>=<span class="title">head</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        head=news;</span><br><span class="line">        news-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next=news;</span><br><span class="line">    news-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct strings *<span class="title">addtofile</span><span class="params">(struct strings *head)</span><span class="comment">//添加节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span> *<span class="title">ne</span>;</span></span><br><span class="line">    <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">        ne=(struct strings *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">        gets(ne-&gt;s);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(ne-&gt;s)!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head=addtolist(head,ne);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">free</span>(ne);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct strings *<span class="title">addinlist</span><span class="params">(struct strings *head,<span class="keyword">char</span>* data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strings</span> *<span class="title">ne</span>;</span></span><br><span class="line">    FILE *fp=fopen(data,<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">        ne=(struct strings *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct strings));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fscanf</span>(fp,<span class="string">"%s"</span>,ne-&gt;s)!=EOF)</span><br><span class="line">        &#123;</span><br><span class="line">            head=addtolist(head,ne);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">free</span>(ne);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> high=<span class="number">1</span>;</span><br><span class="line">    coutmenu(high);</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="keyword">if</span> (kbhit())&#123;</span><br><span class="line">            c=getch();</span><br><span class="line">            <span class="keyword">if</span> (GetAsyncKeyState(VK_UP))&#123;</span><br><span class="line">                high=(high&gt;<span class="number">1</span>)?high<span class="number">-1</span>:<span class="number">7</span>;</span><br><span class="line">                Sleep(<span class="number">140</span>);</span><br><span class="line">                system(<span class="string">"cls"</span>);</span><br><span class="line">                coutmenu(high);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (GetAsyncKeyState(VK_DOWN))&#123;</span><br><span class="line">                high=(high&lt;<span class="number">7</span>)?high+<span class="number">1</span>:<span class="number">1</span>;</span><br><span class="line">                Sleep(<span class="number">140</span>);</span><br><span class="line">                system(<span class="string">"cls"</span>);</span><br><span class="line">                coutmenu(high);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span> (c&lt;=<span class="string">'z'</span>&amp;&amp; c&gt;=<span class="string">'a'</span>)c=c-(<span class="string">'a'</span>-<span class="string">'A'</span>);</span><br><span class="line">            <span class="keyword">if</span> (c&lt;=<span class="string">'F'</span> &amp;&amp; c&gt;=<span class="string">'A'</span>)&#123;</span><br><span class="line">                <span class="comment">//对应处理的程序段</span></span><br><span class="line">                high=c-<span class="string">'A'</span>+<span class="number">1</span>;</span><br><span class="line">                system(<span class="string">"cls"</span>);</span><br><span class="line">                coutmenu(high);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"command [%c] "</span>,c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c==<span class="string">'\r'</span>)&#123;</span><br><span class="line">            <span class="keyword">switch</span> (high)</span><br><span class="line">            &#123;</span><br><span class="line">                system(<span class="string">"cls"</span>);</span><br><span class="line">                coutmenu(high);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Add strings:\n"</span>);</span><br><span class="line">                head=create();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">print</span>(head);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Input your word which you want to find:"</span>);</span><br><span class="line">                <span class="built_in">find</span>(head);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                save(head,<span class="string">"data.txt"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="comment">//head=readfile("data.txt");</span></span><br><span class="line">                head=addinlist(head,<span class="string">"data.txt"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Add strings:"</span>);</span><br><span class="line">                addtofile(head);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="comment">//对应处理的程序段</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"command %c finished"</span>,<span class="string">'A'</span>+high<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c==<span class="string">'Q'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*printf("read file:\n");</span></span><br><span class="line"><span class="comment">    head=readfile("data.txt");//读取文件并创建链表</span></span><br><span class="line"><span class="comment">    print(head);//打印</span></span><br><span class="line"><span class="comment">    printf("add:\n");</span></span><br><span class="line"><span class="comment">    addtofile(head);</span></span><br><span class="line"><span class="comment">    printf("display:\n");</span></span><br><span class="line"><span class="comment">    print(head);</span></span><br><span class="line"><span class="comment">    save(head,"data.txt");</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//head=create();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>你好，访客</title>
    <url>/2022/01/18/hello-world/</url>
    <content><![CDATA[<p>创建这个博客算是跟风的吧，不过我确实想有一个平台可以自己有个性化的形式写教程写文章什么什么的，所以就花了好大力气创建了这个博客。</p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="博客有什么内容？"><a href="#博客有什么内容？" class="headerlink" title="博客有什么内容？"></a>博客有什么内容？</h3><p>目前的计划：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo+github个人博客创建及美化</span><br><span class="line">泰拉瑞亚全流程攻略</span><br><span class="line">魔方教程与魔方测评</span><br><span class="line">我家的猫</span><br></pre></td></tr></table></figure>


<h3 id="其他平台"><a href="#其他平台" class="headerlink" title="其他平台"></a>其他平台</h3><p>哔哩哔哩: <a href="https://space.bilibili.com/403228491" target="_blank" rel="noopener">kai_wei凯惟</a></p>
<h3 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h3><p>QQ:1171113925<br>欢迎骚扰O(∩_∩)O</p>
<h3 id="打赏（未完工）"><a href="#打赏（未完工）" class="headerlink" title="打赏（未完工）"></a>打赏（未完工）</h3><p>马上就来</p>
]]></content>
      <categories>
        <category>索引</category>
      </categories>
      <tags>
        <tag>索引</tag>
      </tags>
  </entry>
</search>
